[project]
name = "miniduct"
version = "0.1.0"
description = ""
authors = [
    {name = "watacoso",email = "watacoso@gmail.com"}
]
keywords = ["miniduct", "data-pipeline", "data-processing"]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries"
]
dependencies = [
    "requests (>=2.32.4,<3.0.0)",
    "google-cloud-storage (>=3.1.1,<4.0.0)",
    "black (>=25.1.0,<26.0.0)",
    "ruff (>=0.12.1,<0.13.0)",
    "pre-commit (>=4.2.0,<5.0.0)"
]

dynamic = ["version"]

[tool.poetry]
packages = [{include = "miniduct", from = "src"}]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-mock = "^3.14.1"
responses = "^0.25.7"


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0","poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
skip-string-normalization = true
line-length = 120

[tool.ruff]
# Same as Black.
line-length = 120

lint.select = [
    "E",  # pycodestyle errors (settings from FastAPI, thanks, @tiangolo!)
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
lint.ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
]

[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
